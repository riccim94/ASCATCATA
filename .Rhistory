ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
test$PROD
test$PROD %>% edit()
?unite
library(ASCATCATA)
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
library(ASCATCATA)
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
library(ASCATCATA)
library(ASCATCATA)
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
library(ASCATCATA)
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
library(ASCATCATA)
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
library(ASCATCATA)
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
as.symbol(names(test.)[13])
rlang::last_error()
rlang::last_trace()
?unite
unite(test.[,13:14], sep = "_")
unite(test.[,13:14], col = 1:2, sep = "_")
library(ASCATCATA)
library(ASCATCATA)
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
c("PROD", "JUDGE")
length(c("PROD", "JUDGE"))
c("PROD", "JUDGE")[1]:c("PROD", "JUDGE")[length(c("PROD", "JUDGE"))]
unite(test.[,13:14], col = 1:2, sep = "_")
library(ASCATCATA)
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
library(ASCATCATA)
library(ASCATCATA)
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
library(ASCATCATA)
unite(test., "ccc")
unite(test., "ccc") %>% edit()
unite(test., "ccc", 12:13) %>% edit()
library(ASCATCATA)
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
library(ASCATCATA)
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
unite(test., "ccc") %>% edit()
test. %>% .[,3:9] %>% .[, names(.) %in% c("JUDGE", "PROD")]
test. %>% .[,3:9] %>% .[, names(.) %in% c("JUDGE", "PROD")] %>% ifelse(!is.null(ncol(.)), unite(., col = paste(c("JUDGE", "PROD"), sep = "_")),.)
test. %>% .[,3:9] %>% .[, names(.) %in% c("JUDGE", "PROD")] %>% unite(., col = paste(c("JUDGE", "PROD"), sep = "_"))
test. %>% .[,3:9] %>% .[, names(.) %in% c("JUDGE", "PROD")] %>% unite(col = paste(c("JUDGE", "PROD")))
test. %>% .[,3:9] %>% .[, names(.) %in% c("JUDGE", "PROD")] %>% unite(paste(c("JUDGE", "PROD")))
test. %>% .[,3:9] %>% .[, names(.) %in% c("JUDGE", "PROD")] %>% unite()
test. %>% .[,3:9] %>% .[, names(.) %in% c("JUDGE", "PROD")] %>% unite(., "cc")
test. %>% .[,3:9] %>% .[, names(.) %in% c("JUDGE", "PROD")] %>% unite(., past(c("aa", "bb", collpase = "_")))
test. %>% .[,3:9] %>% .[, names(.) %in% c("JUDGE", "PROD")] %>% unite(., past(c("aa", "bb", collapase = "_")))
test. %>% .[,3:9] %>% .[, names(.) %in% c("JUDGE", "PROD")] %>% unite(., paste(c("aa", "bb", collapase = "_")))
test. %>% .[,3:9] %>% .[, names(.) %in% c("JUDGE", "PROD")] %>% unite(., paste(c("aa", "bb", collapse = "_")))
paste(c("aa", "bb"), collapse = "_")
test. %>% .[,3:9] %>% .[, names(.) %in% c("JUDGE", "PROD")] %>% unite(., paste(c("aa", "bb"), collapse = "_"))
test. %>% .[,3:9] %>% .[, names(.) %in% c("JUDGE", "PROD")] %>% unite(., "aa_bb")
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
test$PROD_JUDGE_type
library(ASCATCATA)
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
test$PROD
test$PROD %>% factoextra::fviz_pca_biplot()
test$PROD %>% factoextra::fviz_pca_biplot(.)
factoextra::fviz_pca_biplot(test$PROD)
factoextra::fviz_pca_biplot(test$PROD$x)
factoextra::fviz_pca_biplot(test$PROD)
str(test$PROD)
factoextra::fviz_pca_biplot(test$PROD)
library(ASCATCATA)
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
test$PROD
test$PROD$x
library(ASCATCATA)
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
test$PROD
test$PROD %>% edit()
test$JUDGE %>% edit()
library(ASCATCATA)
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
?group_by_at
library(ASCATCATA)
library(ASCATCATA)
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
test$PROD
test$PROD %>% edit()
library(ASCATCATA)
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
test$PROD
?slice
?pick
library(ASCATCATA)
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
library(ASCATCATA)
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
test$PROD
library(ASCATCATA)
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
test$PROD
test$PROD %>% edit()
test$JUDGE
library(ASCATCATA)
test$PROD %>% edit()
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
test$PROD_JUDGE_type
test$type
test$PROD
library(ASCATCATA)
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
test. %>% .[3:9] %>% dplyr::select_at(vars(as.symbol(c("PROD", "JUDGE"))))
test. %>% .[3:9] %>% dplyr::select_at(vars(as.symbol(c("PROD", "REP"))))
test. %>% .[3:12] %>% dplyr::select_at(vars(as.symbol(c("PROD", "REP"))))
test. %>% .[1:12] %>% dplyr::select_at(vars(as.symbol(c("PROD", "REP"))))
test. %>% .[1:12] %>% nams()
test. %>% .[1:12] %>% names()
test. %>% .[1:12] %>% dplyr::select_at(vars((c(as.symbol("PROD"), as.symbol("REP")))))
as.symbol(c("PROD", "REP"))
test.[,"PROD"]
test.[,"PROD"] %>% str()
test.[,"PROD"] %>% as.data.frame() %>% str()
library(ASCATCATA)
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
library(ASCATCATA)
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
test$PROD
library(ASCATCATA)
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
test$PROD
library(ASCATCATA)
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
test$PROD
test$PROD %>% edit()
test$JUDGE
test$JUDGE %>% edit()
test$type %>% edit()
test$PROD_JUDGE_type %>% edit()
library(ASCATCATA)
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
test$PROD
factoextra::fviz_pca_biplot(test$PROD)
factoextra::fviz_pca_biplot(test$JUDGE)
library(ASCATCATA)
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
library(ASCATCATA)
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
library(ASCATCATA)
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
library(ASCATCATA)
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
library(ASCATCATA)
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
library(ASCATCATA)
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
library(ASCATCATA)
test$Residuals
library(ASCATCATA)
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
test$Residuals
library(ASCATCATA)
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
test$Residuals
test$Residuals
library(ASCATCATA)
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
test$Residuals
library(ASCATCATA)
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
library(ASCATCATA)
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
test$Residuals
library(ASCATCATA)
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
test$Residuals
test$Residuals %>% edit()
library(ASCATCATA)
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
test$Residuals
library(ASCATCATA)
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
test$Residuals
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
library(ASCATCATA)
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
rlang::last_error()
formula <- tcata ~ foact1 + fact2 * foact3
formula[[2]]
formula[[3]]
c("foact1", "foact2", "foact4") %>% .[. %in% formula[[3]]]
c("foact1", "foact2", "foact4") %>% .[. %in% as.character(formula[[3]])]
formula[[3]]
as.charactr(formula[[3]])
as.character(formula[[3]])
as.character(formula[[3]][3])
as.character(formula[[3]][3][1])
as.character(formula[[3]][3][2])
as.character(formula[[3]][4])
as.character(formula[[3]][5])
as.character(formula[[3]]) %>% str_split(., "+|*|:")
as.character(formula[[3]]) %>% str_split(., "[+*:]")
as.character(formula[[3]]) %>% str_split_all(., "[+*:]")
as.character(formula[[3]]) %>% str_split(., "[+*:]", simplify = T)
as.character(formula[[3]]) %>% unlist() %>% str_split(., "[+*:]", simplify = T)
as.character(formula[[3]]) %>% unlist()
as.character(formula[[3]]) %>% unlist() %>% str_split(., "[+*:]")
as.character(formula[[3]]) %>% unlist() %>% str_split(., "[+*:]", simplify = T)
as.character(formula[[3]]) %>% as.vector() %>% str_split(., "[+*:]", simplify = T)
library(ASCATCATA)
as.character(formula[[3]]) %>% as.vector() %>% str_split(., "[+*:]", simplify = T) %>% str_trim()
library(ASCATCATA)
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
library(ASCATCATA)
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
test$Residuals
?pivot_wider
library(ASCATCATA)
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
test$Residuals
test$Residuals %>% View()
library(ASCATCATA)
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
test$Residuals
library(ASCATCATA)
as.symbol(c("a", "b", "d"))
c("a", "b", "d") %>% as.symbol()
c("a", "b", "d") %>% .[] %>% as.symbol()
c("a", "b", "d") %>% .[1:length(.)] %>% as.symbol()
rlang::syms(c("a", "b", "d") )
!!! rlang::syms(c("a", "b", "d") )
!!!  rlang::syms(c("a", "b", "d") )
rlang::syms(c("a", "b", "d") ) %>% as.vector()
rlang::syms(c("a", "b", "d") ) %>% unlist()
rlang::syms(c("a", "b", "d") ) %>% str()
rlang::syms(c("a", "b", "d") ) %>% as.vector()
rlang::syms(c("a", "b", "d") ) %>% unlist()
rlang::syms(c("a", "b", "d") ) %>% unlist() %>% str()
?rlang::syms
library(ASCATCATA)
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
test$Residuals
test$Residuals %>% edit()
library(ASCATCATA)
library(ASCATCATA)
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
library(ASCATCATA)
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
library(ASCATCATA)
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
test$Residuals
test$Residuals %>% image()
test$Residuals %>% .[,4:ncol(.)] %>% image()
test$Residuals %>% .[,4:ncol(.)] %>% as.matrix() %>% image()
test$Residuals %>% .[,4:ncol(.)] %>% View()
test$Residuals %>% View()
test$Residuals %>% View()
test$Residuals %>% View()
test$Residuals %>% .[,4:ncol(.)] %>% mutate_all(scale) %>% prcomp()
test$Residuals %>% .[,4:ncol(.)] %>% mutate_all(scale) %>% prcomp() %>% factoextra::fviz_pca_biplot()
test$JUDGE %>% fviz_pca_biplot()
test$JUDGE %>% factoextra::fviz_pca_biplot()
test$PROD_JUDGE %>% factoextra::fviz_pca_biplot()
test$ù %>% factoextra::fviz_pca_biplot()
test$JUDGE_type %>% factoextra::fviz_pca_biplot()
test$PROD_JUDGE_type %>% factoextra::fviz_pca_biplot()
library(ASCATCATA)
library(ASCATCATA)
usethis::use_testthat()
usethis::use_test()
usethis::use_test(name = "R")
test_that("multiplication works", {
expect_equal(2 * 2, 4)
})
test_that("multiplication works", {
expect_equal(2 * 2, 4)
})
usethis::test_that("multiplication works", {
expect_equal(2 * 2, 4)
})
test_that("multiplication works", {
expect_equal(2 * 2, 4)
})
usethis::use_test(name = "R/tcatasca.R")
library(testthat)
library(ASCATCATA)
test_check("ASCATCATA")
library(ASCATCATA)
library(ASCATCATA)
tcatasca <- function(formula, data, timecol, attributes, ...){
prev_contr <- options()$contrasts
options(contrasts =  rep("contr.sum", 2))
data3 <- list()
ref <- formula[[2L]]
fact <- as.character(formula[[3L]]) %>% as.vector() %>%
str_split(., "[+*:]", simplify = T) %>% str_trim()
timecol <- as.symbol(timecol)
attributes <- as.symbol(attributes)
data1 <- data %>% group_by_at(vars(c(timecol, attributes))) %>%
do(filter(., nrow(unique(dplyr::select(., ref))) != 1) %>%
droplevels()) %>% ungroup() %>% droplevels()
colnames1 <- names(data1)
#View(data1)
data2 <- data1 %>% split(dplyr::select(., timecol)) %>%
map(~droplevels(.) %>% split(., dplyr::select(., attributes)) %>%
map(~droplevels(.) %>% data.frame(effect = predict(glm(as.formula(formula),
data = mutate_at(., vars(ref), scale), family = gaussian()),
type = "terms"))))
colnames2 <- data2[[1]][[1]] %>% names(.)
data2 <- data2 %>% map(., ~plyr::ldply(., function(x){as.data.frame(x) %>%
`colnames<-`(c(colnames2))})) %>% plyr::ldply(., function(x){
data.frame(x) %>% `colnames<-`(c(as.character(attributes),
colnames2))}) %>% dplyr::select(-timecol)
names(data2)[1] <- as.character(timecol)
for(i in (length(colnames1)+1):ncol(data2)){
anchor <- names(data2)[i]
name <- anchor %>% str_remove(., "^effect.") %>% str_split_1(., "\\.")
name2 <- paste(name, collapse = "_")
refk <- c("refk")
data2 %>% .[,c(1:2, i)] %>% cbind(data2 %>% .[,3:length(colnames1)] %>%
.[, names(.) %in% name] %>% as.data.frame(.) %>% ifelse(!is.null(ncol(.)),
unite(., col = name2, sep = "_"), .)) %>%
`colnames<-`(c(names(data2)[c(1,2,i)], name2)) -> temp;
temp[refk] <- paste0(temp[,as.character(timecol)], "_",
temp[,as.character(attributes)])
data3[[name2]] <- temp %>% dplyr::select(-timecol, -attributes) %>%
group_by_at(vars(refk, name2)) %>% slice(1) %>% ungroup() %>%
pivot_wider(names_from = refk, values_from = as.symbol(anchor)) %>%
column_to_rownames(name2) %>%
mutate_all(., function(x){x <- x - mean(x, na.rm = T)}) %>% prcomp()
}
#residuals
data1 %>% split(dplyr::select(., timecol)) %>%
map(~droplevels(.) %>% split(., dplyr::select(., attributes)) %>%
map(~droplevels(.) %>% data.frame(
residuals = residuals.glm(glm(as.formula(formula),
data = mutate_at(., vars(ref), scale), family = gaussian())))) %>%
plyr::ldply(., function(x){data.frame(x)}) ) %>%
plyr::ldply(., function(x){data.frame(x) %>%
`colnames<-`(c(as.character(attributes), colnames1, "residuals"))}) %>%
dplyr::select(-ref, -timecol) %>% `colnames<-`(
c(as.character(timecol),names(.)[2:length(names(.))])) -> temp
temp[refk] <- paste0(temp[,as.character(timecol)], "_",
temp[,as.character(attributes)])
data3[["Residuals"]] <- temp %>% dplyr::select(-timecol, -attributes) %>%
.[,names(.) %in% c(fact, refk, "residuals")] %>%
group_by(refk) %>%
do(mutate(., colref = 1:nrow(.))) %>% ungroup() %>%
pivot_wider(names_from = refk, values_from = residuals) %>%
dplyr::select(-colref)
options(contrasts =  prev_contr)
return(data3)
}
library(ASCATCATA)
library(ASCATCATA)
library(ASCATCATA)
library(ASCATCATA)
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
usethis::use_description()
str(tempR::ojtcata)
names(tempR::ojtcata)
?lm
library(tidyverse)
library(lme4)
data <- tempr::ojtcata
data <- tempR::ojtcata
data
data.long <- gather(data, time, value, 5:25)
devtools::document()
test
test$Residuals
test$Residuals %>% .[,4:ncol(.)] %>% mutate_all(scale) %>% prcomp() %>% fviz_pca_biplot()
test$Residuals %>% .[,4:ncol(.)] %>% mutate_all(scale) %>% prcomp() %>% factoxtra::fviz_pca_biplot()
test$Residuals %>% .[,4:ncol(.)] %>% mutate_all(scale) %>% prcomp() %>% factoextra::fviz_pca_biplot()
tcatasca <- function(formula, data, timecol, attributes, ...){
prev_contr <- options()$contrasts
options(contrasts =  rep("contr.sum", 2))
data3 <- list()
ref <- formula[[2L]]
fact <- as.character(formula[[3L]]) %>% as.vector() %>%
str_split(., "[+*:]", simplify = T) %>% str_trim()
timecol <- as.symbol(timecol)
attributes <- as.symbol(attributes)
data1 <- data %>% group_by_at(vars(c(timecol, attributes))) %>%
do(filter(., nrow(unique(dplyr::select(., ref))) != 1) %>%
droplevels()) %>% ungroup() %>% droplevels()
colnames1 <- names(data1)
#View(data1)
data2 <- data1 %>% split(dplyr::select(., timecol)) %>%
map(~droplevels(.) %>% split(., dplyr::select(., attributes)) %>%
map(~droplevels(.) %>% data.frame(effect = predict(glm(as.formula(formula),
data = mutate_at(., vars(ref), scale), family = gaussian()),
type = "terms"))))
colnames2 <- data2[[1]][[1]] %>% names(.)
data2 <- data2 %>% map(., ~plyr::ldply(., function(x){as.data.frame(x) %>%
`colnames<-`(c(colnames2))})) %>% plyr::ldply(., function(x){
data.frame(x) %>% `colnames<-`(c(as.character(attributes),
colnames2))}) %>% dplyr::select(-timecol)
names(data2)[1] <- as.character(timecol)
for(i in (length(colnames1)+1):ncol(data2)){
anchor <- names(data2)[i]
name <- anchor %>% str_remove(., "^effect.") %>% str_split_1(., "\\.")
name2 <- paste(name, collapse = "_")
refk <- c("refk")
data2 %>% .[,c(1:2, i)] %>% cbind(data2 %>% .[,3:length(colnames1)] %>%
.[, names(.) %in% name] %>% as.data.frame(.) %>% ifelse(!is.null(ncol(.)),
unite(., col = name2, sep = "_"), .)) %>%
`colnames<-`(c(names(data2)[c(1,2,i)], name2)) -> temp;
temp[refk] <- paste0(temp[,as.character(timecol)], "_",
temp[,as.character(attributes)])
data3[[name2]] <- temp %>% dplyr::select(-timecol, -attributes) %>%
group_by_at(vars(refk, name2)) %>% slice(1) %>% ungroup() %>%
pivot_wider(names_from = refk, values_from = as.symbol(anchor)) %>%
column_to_rownames(name2) %>%
mutate_all(., function(x){x <- x - mean(x, na.rm = T)}) %>% prcomp()
}
#residuals
data1 %>% split(dplyr::select(., timecol)) %>%
map(~droplevels(.) %>% split(., dplyr::select(., attributes)) %>%
map(~droplevels(.) %>% data.frame(
residuals = residuals.glm(glm(as.formula(formula),
data = mutate_at(., vars(ref), scale), family = gaussian())))) %>%
plyr::ldply(., function(x){data.frame(x)}) ) %>%
plyr::ldply(., function(x){data.frame(x) %>%
`colnames<-`(c(as.character(attributes), colnames1, "residuals"))}) %>%
dplyr::select(-ref, -timecol) %>% `colnames<-`(
c(as.character(timecol),names(.)[2:length(names(.))])) -> temp
temp[refk] <- paste0(temp[,as.character(timecol)], "_",
temp[,as.character(attributes)])
data3[["Residuals"]] <- temp %>% dplyr::select(-timecol, -attributes) %>%
.[,names(.) %in% c(fact, refk, "residuals")] %>%
group_by(refk) %>%
do(mutate(., colref = 1:nrow(.))) %>% ungroup() %>%
pivot_wider(names_from = refk, values_from = residuals) %>%
dplyr::select(-colref) %>% `colnames<-`(paste0(.[,fact], "_", 1:nrow(.)))
options(contrasts =  prev_contr)
return(data3)
}
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
test$Residuals
test$Residuals %>% rownames()
library(ASCATCATA)
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
library(ASCATCATA)
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
library(ASCATCATA)
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
library(ASCATCATA)
test$Residuals
test$Residuals %>% View()
library(ASCATCATA)
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
test$Residuals
test$Residuals %>% View()
test.[,2]
test.[,2:4]
test.[,2:4] %>% paste0(., 1:nrow(.))
test.[,2:4] %>% apply(.,1,paste0)
test.[,2:4] %>% dim()
test.[,2:4] %>% apply(.,1,paste0) %>% print()
test.[,2:4] %>% apply(.,1,paste0) %>% .[1:100,]
test.[,2:4] %>% apply(.,1,paste0) %>% .[1:100]
test.[,2:4] %>% apply(.,1,paste, collapse = "_") %>% .[1:100]
library(ASCATCATA)
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
test$Residuals
test$Residuals %>% View()
library(ASCATCATA)
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
library(ASCATCATA)
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
library(ASCATCATA)
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
test$Residuals
test$Residuals %>% fviz_pca_biplot()
library(factoextra)
test$Residuals %>% fviz_pca_biplot()
library(ASCATCATA)
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
library(ASCATCATA)
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
test$Residuals
test$Residuals %>% fviz_pca_biplot()
library(ASCATCATA)
test.$time
library(ASCATCATA)
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
test$PROD %>% fviz_pca_biplot()
library(ASCATCATA)
ASCATCATA::tcatasca(TCATA ~ PROD*JUDGE*type, data = test_data, timecol = "time", attributes = "ATTRIBUTE") -> test
test$info$timecol
test$info$attributes
library(ASCATCATA)
library(ASCATCATA)
library(ASCATCATA)
library(ASCATCATA)
library(ASCATCATA)
library(ASCATCATA)
library(ASCATCATA)
98.82/3
32.94+350
